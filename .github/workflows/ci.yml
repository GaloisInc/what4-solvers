name: what4-solvers
on:
  push:
    tags: ["v?[0-9]+"]
    branches: [main, "release-**"]
  pull_request:
  workflow_dispatch:

env:
  CACHE_VERSION: 1

jobs:
  build_simple:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-18.04, macos-10.15, windows-2019]
        solver: [abc]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Install dependencies (Windows)
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: MSYS
          install: |
            gcc
            make
        if: runner.os == 'Windows'

      - name: build_solver (non-Windows)
        shell: bash
        run: .github/ci.sh build_${{ matrix.solver }}
        if: runner.os != 'Windows'

      - name: build_solver (Windows)
        shell: msys2 {0}
        run: .github/ci.sh build_${{ matrix.solver }}
        if: runner.os == 'Windows'

      - uses: actions/upload-artifact@v2
        with:
          path: bin
          name: ${{ matrix.os }}-${{ matrix.solver }}-bin

  build_complex:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-18.04, macos-10.15, windows-2019]
        solver: [cvc4, yices, z3]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Install dependencies (Ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install gperf automake autoconf lzip
        if: runner.os == 'Linux'

      - name: Install dependencies (macOS)
        run: |
          brew update
          brew install gperf automake autoconf
        if: runner.os == 'macOS'

      - name: Install dependencies (Windows)
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: MINGW64
          install: |
            autoconf
            automake
            cmake
            dos2unix
            git
            gperf
            lzip
            m4
            make
            mingw-w64-x86_64-gcc
            python
            unzip
        if: runner.os == 'Windows'

      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - uses: BSFishy/pip-action@v1
        with:
          packages: |
            toml

      - name: build_solver (non-Windows)
        shell: bash
        run: .github/ci.sh build_${{ matrix.solver }}
        if: runner.os != 'Windows'

      - name: build_solver (Windows)
        shell: msys2 {0}
        run: .github/ci.sh build_${{ matrix.solver }}
        if: runner.os == 'Windows'

      - uses: actions/upload-artifact@v2
        with:
          path: bin
          name: ${{ matrix.os }}-${{ matrix.solver }}-bin

  package_solvers:
    runs-on: ${{ matrix.os }}
    needs: [build_simple, build_complex]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-18.04, macos-10.15, windows-2019]
    steps:

      - uses: actions/download-artifact@v2
        with:
          name: "${{ runner.os }}-abc-bin"
          path: bin

      - uses: actions/download-artifact@v2
        with:
          name: "${{ runner.os }}-cvc4-bin"
          path: bin

      - uses: actions/download-artifact@v2
        with:
          name: "${{ runner.os }}-yices-bin"
          path: bin

      - uses: actions/download-artifact@v2
        with:
          name: "${{ runner.os }}-z3-bin"
          path: bin

      - uses: actions/upload-artifact@v2
        with:
          path: bin
          name: ${{ matrix.os }}-bin

  # Indicates sufficient CI success for the purposes of mergify merging the pull
  # request, see .github/mergify.yml. This is done instead of enumerating each
  # instance of each job in the mergify configuration for a number of reasons:
  # - continue-on-error is respected, won't block merge
  # - changes to jobs or job instances don't require a mergify config update
  # - dependencies through `needs:` are validated, CI will fail if it's invalid
  mergify:
    runs-on: ubuntu-20.04
    needs: [build_simple, build_complex]
    steps:
      - run: "true"
